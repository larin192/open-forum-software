{"version":3,"sources":["_variables.scss","_animations.scss","_front.scss","_breakpoints.scss","_components.scss"],"names":[],"mappings":"AAAQ,iGCAR,wBACE,GACE,UAAA,uBAEF,KACE,UAAA,uBCLJ,EAAA,QAAA,SACI,OAAA,EACA,QAAA,EACA,WAAA,WAEJ,KACI,UAAA,KCiEI,yBDlER,KAGQ,UAAA,MC+DA,yBDlER,KAMQ,UAAA,MAGR,KACI,WAAA,KACA,YFPU,IAAA,CAAA,WEQV,MFXiB,KG8Eb,4BDhEA,iBACI,WAAA,QAIZ,EACI,gBAAA,KACA,MAAA,KAEJ,QACI,iBF1Be,QE4Bf,kBACI,YAAA,EAEJ,cACI,QAAA,KACA,gBAAA,cACA,YAAA,OACA,QAAA,KAAA,KACA,WAAA,KAGJ,oBACI,QAAA,KACA,YAAA,OACA,eAAA,OAGJ,eACI,YAAA,IACA,eAAA,QAGJ,mBACI,QAAA,KACA,KFlDa,KG8Eb,4BD9BJ,mBAIQ,QAAA,QC0BJ,4BDtBJ,uBAEQ,SAAA,SACA,IAAA,KACA,MAAA,EACA,MAAA,KACA,OAAA,mBACA,WAAA,EACA,WAAA,WAAA,IAAA,YACA,iBAAA,QACA,QAAA,EACA,SAAA,QCWJ,4BDtBJ,uBAcQ,OAAA,mBACA,IAAA,MAEJ,4BACI,WAAA,mBAIR,aACI,gBAAA,KACA,QAAA,KACA,IAAA,KAGR,cACI,SAAA,SACA,IAAA,OAEA,yBACI,iBAAA,KACA,MAAA,QAGJ,uBACI,QAAA,KACA,UAAA,KC9BA,yBD4BJ,uBAIQ,WAAA,MAIR,6BACI,MAAA,KCrCA,yBDoCJ,6BAGQ,MAAA,kBAGR,4BACI,MAAA,KC3CA,yBD0CJ,4BAGQ,MAAA,kBEjHZ,YACE,MAAA,KAEF,WACE,OAAA,EAAA,KD6EM,4BC9ER,WAII,MAAA,MD6DI,yBCjER,WAOI,MAAA,MACA,QAAA,KAAA,KAAA,KAAA,MDyDI,yBCjER,WAWI,MAAA,ODsDI,yBCjER,WAcI,MAAA,ODmDI,0BCjER,WAiBI,MAAA,QAIJ,OACE,SAAA,SACA,MAAA,KACA,OAAA,MACA,cAAA,KACA,WAAA,MACA,WAAA,MAGF,cACE,UAAA,aAAA,IAAA,4BAAA,SAEF,2BACE,gBAAA,IACA,mBAAA,IAEF,2BACE,gBAAA,IACA,mBAAA,IAEF,2BACE,gBAAA,IACA,mBAAA,IAEF,2BACE,gBAAA,IACA,mBAAA,IAEF,cACE,UAAA,eAGE,4BACE,UAAA,aAAA,IAAA,4BAAA,QAAA,SAGF,yCACE,gBAAA,IACA,mBAAA,IAGF,yCACE,gBAAA,IACA,mBAAA,IAGF,yCACE,gBAAA,IACA,mBAAA,IAGF,yCACE,gBAAA,KACA,mBAAA","file":"main.css","sourcesContent":["@import url('https://fonts.googleapis.com/css2?family=Hind:wght@300;400;500;600;700&display=swap');\r\n\r\n$primary-color: #2460e6;\r\n$secondary-color: #173d91;\r\n$background-color: #161616;\r\n\r\n$text-primary-color: #fff;\r\n$text-secondary-color: #696969;\r\n\r\n$font-family: 'Hind', sans-serif;","@keyframes move-forever {\r\n  0% {\r\n    transform: translate3d(-90px, 0, 0);\r\n  }\r\n  100% {\r\n    transform: translate3d(85px, 0, 0);\r\n  }\r\n}","*, *::before, *::after {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\nhtml {\r\n    font-size: 15px;\r\n    @include media-breakpoint-up(md) {\r\n        font-size: 17px;\r\n    }\r\n    @include  media-breakpoint-up(lg) {\r\n        font-size: 19px;\r\n    }\r\n}\r\nbody {\r\n    background: #ddd;\r\n    font-family: $font-family;\r\n    color: $text-primary-color;\r\n\r\n    @include media-breakpoint-down(md) {\r\n        &.nav-visible {\r\n            overflow-y: hidden;\r\n        }\r\n    }\r\n}\r\na {\r\n    text-decoration: none;\r\n    color: #fff;\r\n}\r\n.header {\r\n    background-color: $background-color;\r\n\r\n    &.container {\r\n        padding-top: 0;\r\n    }\r\n    &__logo {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        padding: 11px 20px;\r\n        max-height: 90px;\r\n    }\r\n\r\n    &__background {\r\n        display: flex;\r\n        align-items: center;\r\n        flex-direction: column;\r\n    }\r\n\r\n    &__title {\r\n        font-weight: 300;\r\n        letter-spacing: -0.15rem;\r\n    }\r\n\r\n    &__hamburger {\r\n        display: none;\r\n        fill: $text-primary-color;\r\n        @include media-breakpoint-down(md) {\r\n            display: inline;\r\n        }\r\n    }\r\n\r\n    &__nav-container {\r\n        @include media-breakpoint-down(md) {\r\n            position: absolute;\r\n            top: 78px;\r\n            right: 0;\r\n            width: 100%;\r\n            height: calc(100vh - 78px);\r\n            max-height: 0;\r\n            transition: max-height 0.2s ease-in-out;\r\n            background-color: #161616;\r\n            z-index: 5;\r\n            overflow: hidden;\r\n        }\r\n        @include media-breakpoint-down(sm) {\r\n            height: calc(100vh - 70px);\r\n            top: 70px;\r\n        }\r\n        &.show {\r\n            max-height: calc(100vh - 70px)\r\n        }\r\n    }\r\n\r\n    &__nav {\r\n        list-style-type: none;\r\n        display: flex;\r\n        gap: 20px;\r\n    }\r\n}\r\n.main-content {\r\n    position: relative;\r\n    top: -160px;\r\n\r\n    &__container {\r\n        background-color: #fff;\r\n        color: #161616;\r\n    }\r\n\r\n    &__content {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        @include media-breakpoint-up(md) {\r\n            column-gap: 20px;\r\n        }\r\n    }\r\n\r\n    &__category-list {\r\n        width: 100%;\r\n        @include media-breakpoint-up(md) {\r\n            width: calc(70% - 10px);\r\n        }\r\n    }\r\n    &__widgets-list {\r\n        width: 100%;\r\n        @include media-breakpoint-up(md) {\r\n            width: calc(30% - 10px);\r\n        }\r\n    }\r\n}","$grid-breakpoints: (\r\n    xs: 0,\r\n    sm: 576px,\r\n    md: 768px,\r\n    lg: 992px,\r\n    xl: 1200px,\r\n    xxl: 1400px\r\n) !default;\r\n// Breakpoint viewport sizes and media queries.\r\n//\r\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\r\n//\r\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\r\n//\r\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\r\n\r\n// Name of the next breakpoint, or null for the last breakpoint.\r\n//\r\n//    >> breakpoint-next(sm)\r\n//    md\r\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    md\r\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\r\n//    md\r\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\r\n    $n: index($breakpoint-names, $name);\r\n    @if not $n {\r\n        @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\r\n    }\r\n    @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\r\n}\r\n\r\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\r\n//\r\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    576px\r\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\r\n    $min: map-get($breakpoints, $name);\r\n    @return if($min != 0, $min, null);\r\n}\r\n\r\n// Maximum breakpoint width.\r\n// The maximum value is reduced by 0.02px to work around the limitations of\r\n// `min-` and `max-` prefixes and viewports with fractional widths.\r\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\r\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\r\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\r\n//\r\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    767.98px\r\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\r\n    $max: map-get($breakpoints, $name);\r\n    @return if($max and $max > 0, $max - .02, null);\r\n}\r\n\r\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\r\n// Useful for making responsive utilities.\r\n//\r\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    \"\"  (Returns a blank string)\r\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    \"-sm\"\r\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\r\n    @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\r\n}\r\n\r\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\r\n// Makes the @content apply to the given breakpoint and wider.\r\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\r\n    $min: breakpoint-min($name, $breakpoints);\r\n    @if $min {\r\n        @media (min-width: $min) {\r\n            @content;\r\n        }\r\n    } @else {\r\n        @content;\r\n    }\r\n}\r\n\r\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\r\n// Makes the @content apply to the given breakpoint and narrower.\r\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\r\n    $max: breakpoint-max($name, $breakpoints);\r\n    @if $max {\r\n        @media (max-width: $max) {\r\n            @content;\r\n        }\r\n    } @else {\r\n        @content;\r\n    }\r\n}\r\n\r\n// Media that spans multiple breakpoint widths.\r\n// Makes the @content apply between the min and max breakpoints\r\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\r\n    $min: breakpoint-min($lower, $breakpoints);\r\n    $max: breakpoint-max($upper, $breakpoints);\r\n\r\n    @if $min != null and $max != null {\r\n        @media (min-width: $min) and (max-width: $max) {\r\n            @content;\r\n        }\r\n    } @else if $max == null {\r\n        @include media-breakpoint-up($lower, $breakpoints) {\r\n            @content;\r\n        }\r\n    } @else if $min == null {\r\n        @include media-breakpoint-down($upper, $breakpoints) {\r\n            @content;\r\n        }\r\n    }\r\n}\r\n\r\n// Media between the breakpoint's minimum and maximum widths.\r\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\r\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\r\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\r\n    $min:  breakpoint-min($name, $breakpoints);\r\n    $next: breakpoint-next($name, $breakpoints);\r\n    $max:  breakpoint-max($next, $breakpoints);\r\n\r\n    @if $min != null and $max != null {\r\n        @media (min-width: $min) and (max-width: $max) {\r\n            @content;\r\n        }\r\n    } @else if $max == null {\r\n        @include media-breakpoint-up($name, $breakpoints) {\r\n            @content;\r\n        }\r\n    } @else if $min == null {\r\n        @include media-breakpoint-down($next, $breakpoints) {\r\n            @content;\r\n        }\r\n    }\r\n}\r\n",".form-control {\r\n\r\n}\r\n.login-page {\r\n  color: #fff;\r\n}\r\n.container {\r\n  margin: 0 auto;\r\n\r\n  @include media-breakpoint-down(sm) {\r\n    width: 100%\r\n  }\r\n  @include media-breakpoint-up(sm) {\r\n    width: 540px;\r\n    padding: 15px 20px 15px 20px;\r\n  }\r\n  @include media-breakpoint-up(md) {\r\n    width: 720px;\r\n  }\r\n  @include media-breakpoint-up(lg) {\r\n    width: 960px;\r\n  }\r\n  @include media-breakpoint-up(xl) {\r\n    width: 1100px;\r\n  }\r\n}\r\n\r\n.waves {\r\n  position:relative;\r\n  width: 100%;\r\n  height: 250px;\r\n  margin-bottom:-7px; /*Fix for safari gap*/\r\n  min-height:100px;\r\n  max-height:150px;\r\n}\r\n\r\n.parallax > use {\r\n  animation: move-forever 35s cubic-bezier(.55,.5,.45,.5) infinite;\r\n}\r\n.parallax > use:nth-child(1) {\r\n  animation-delay: -2s;\r\n  animation-duration: 11s;\r\n}\r\n.parallax > use:nth-child(2) {\r\n  animation-delay: -3s;\r\n  animation-duration: 15s;\r\n}\r\n.parallax > use:nth-child(3) {\r\n  animation-delay: -4s;\r\n  animation-duration: 23s;\r\n}\r\n.parallax > use:nth-child(4) {\r\n  animation-delay: -5s;\r\n  animation-duration: 35s;\r\n}\r\n.waves.second {\r\n  transform: rotate(180deg);\r\n\r\n  .parallax {\r\n    & > use {\r\n      animation: move-forever 35s cubic-bezier(.55, .5, .45, .5) reverse infinite;\r\n    }\r\n\r\n    & > use:nth-child(1) {\r\n      animation-delay: -1s;\r\n      animation-duration: 11s;\r\n    }\r\n\r\n    & > use:nth-child(2) {\r\n      animation-delay: -9s;\r\n      animation-duration: 15s;\r\n    }\r\n\r\n    & > use:nth-child(3) {\r\n      animation-delay: -2s;\r\n      animation-duration: 23s;\r\n    }\r\n\r\n    & > use:nth-child(4) {\r\n      animation-delay: -13s;\r\n      animation-duration: 35s;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n"]}