{"version":3,"sources":["_variables.scss","_front.scss","_breakpoints.scss","_components.scss"],"names":[],"mappings":"AAAQ,iGCAR,EAAA,QAAA,SACI,OAAA,EACA,QAAA,EACA,WAAA,WAEJ,KACI,UAAA,KCiEI,yBDlER,KAGQ,UAAA,MC+DA,yBDlER,KAMQ,UAAA,MAGR,KACI,WDXe,QCYf,YDPU,IAAA,CAAA,WCQV,MDXiB,KCarB,OACI,SAAA,SAEA,aACI,QAAA,KACA,gBAAA,cACA,YAAA,OACA,QAAA,KAAA,KACA,gBACI,YAAA,IACA,eAAA,QAEJ,iBACI,OAAA,QACA,KD3BS,KC8BjB,WACI,QAAA,MACA,WAAA,EACA,SAAA,SACA,MAAA,KACA,OAAA,mBACA,iBDtCW,QCwCX,gBACI,WAAA,mBAEJ,cACI,QAAA,KACA,eAAA,OACA,gBAAA,OACA,YAAA,OACA,gBAAA,KACA,OAAA,mBElDZ,YACE,MAAA","file":"main.css","sourcesContent":["@import url('https://fonts.googleapis.com/css2?family=Hind:wght@300;400;500;600;700&display=swap');\r\n\r\n$primary-color: #2460e6;\r\n$secondary-color: #173d91;\r\n$background-color: #161616;\r\n\r\n$text-primary-color: #fff;\r\n$text-secondary-color: #696969;\r\n\r\n$font-family: 'Hind', sans-serif;","*, *::before, *::after {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\nhtml {\r\n    font-size: 15px;\r\n    @include media-breakpoint-up(md) {\r\n        font-size: 17px;\r\n    }\r\n    @include  media-breakpoint-up(lg) {\r\n        font-size: 19px;\r\n    }\r\n}\r\nbody {\r\n    background: $background-color;\r\n    font-family: $font-family;\r\n    color: $text-primary-color;\r\n}\r\nheader {\r\n    position: relative;\r\n\r\n    .logo {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        padding: 11px 20px;\r\n        h1 {\r\n            font-weight: 300;\r\n            letter-spacing: -0.15rem;\r\n        }\r\n        svg {\r\n            cursor: pointer;\r\n            fill: $text-primary-color;\r\n        }\r\n    }\r\n    nav {\r\n        display: block;\r\n        max-height: 0;\r\n        position: absolute;\r\n        width: 100%;\r\n        height: calc(100vh - 70px);\r\n        background-color: $background-color;\r\n\r\n        &.show {\r\n            max-height: calc(100vh - 70px);\r\n        }\r\n        ul {\r\n            display: flex;\r\n            flex-direction: column;\r\n            justify-content: center;\r\n            align-items: center;\r\n            list-style-type: none;\r\n            height: calc(100vh - 70px);\r\n            li {\r\n            }\r\n        }\r\n    }\r\n}","$grid-breakpoints: (\r\n    xs: 0,\r\n    sm: 576px,\r\n    md: 768px,\r\n    lg: 992px,\r\n    xl: 1200px,\r\n    xxl: 1400px\r\n) !default;\r\n// Breakpoint viewport sizes and media queries.\r\n//\r\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\r\n//\r\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\r\n//\r\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\r\n\r\n// Name of the next breakpoint, or null for the last breakpoint.\r\n//\r\n//    >> breakpoint-next(sm)\r\n//    md\r\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    md\r\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\r\n//    md\r\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\r\n    $n: index($breakpoint-names, $name);\r\n    @if not $n {\r\n        @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\r\n    }\r\n    @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\r\n}\r\n\r\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\r\n//\r\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    576px\r\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\r\n    $min: map-get($breakpoints, $name);\r\n    @return if($min != 0, $min, null);\r\n}\r\n\r\n// Maximum breakpoint width.\r\n// The maximum value is reduced by 0.02px to work around the limitations of\r\n// `min-` and `max-` prefixes and viewports with fractional widths.\r\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\r\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\r\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\r\n//\r\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    767.98px\r\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\r\n    $max: map-get($breakpoints, $name);\r\n    @return if($max and $max > 0, $max - .02, null);\r\n}\r\n\r\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\r\n// Useful for making responsive utilities.\r\n//\r\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    \"\"  (Returns a blank string)\r\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    \"-sm\"\r\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\r\n    @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\r\n}\r\n\r\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\r\n// Makes the @content apply to the given breakpoint and wider.\r\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\r\n    $min: breakpoint-min($name, $breakpoints);\r\n    @if $min {\r\n        @media (min-width: $min) {\r\n            @content;\r\n        }\r\n    } @else {\r\n        @content;\r\n    }\r\n}\r\n\r\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\r\n// Makes the @content apply to the given breakpoint and narrower.\r\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\r\n    $max: breakpoint-max($name, $breakpoints);\r\n    @if $max {\r\n        @media (max-width: $max) {\r\n            @content;\r\n        }\r\n    } @else {\r\n        @content;\r\n    }\r\n}\r\n\r\n// Media that spans multiple breakpoint widths.\r\n// Makes the @content apply between the min and max breakpoints\r\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\r\n    $min: breakpoint-min($lower, $breakpoints);\r\n    $max: breakpoint-max($upper, $breakpoints);\r\n\r\n    @if $min != null and $max != null {\r\n        @media (min-width: $min) and (max-width: $max) {\r\n            @content;\r\n        }\r\n    } @else if $max == null {\r\n        @include media-breakpoint-up($lower, $breakpoints) {\r\n            @content;\r\n        }\r\n    } @else if $min == null {\r\n        @include media-breakpoint-down($upper, $breakpoints) {\r\n            @content;\r\n        }\r\n    }\r\n}\r\n\r\n// Media between the breakpoint's minimum and maximum widths.\r\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\r\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\r\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\r\n    $min:  breakpoint-min($name, $breakpoints);\r\n    $next: breakpoint-next($name, $breakpoints);\r\n    $max:  breakpoint-max($next, $breakpoints);\r\n\r\n    @if $min != null and $max != null {\r\n        @media (min-width: $min) and (max-width: $max) {\r\n            @content;\r\n        }\r\n    } @else if $max == null {\r\n        @include media-breakpoint-up($name, $breakpoints) {\r\n            @content;\r\n        }\r\n    } @else if $min == null {\r\n        @include media-breakpoint-down($next, $breakpoints) {\r\n            @content;\r\n        }\r\n    }\r\n}\r\n",".form-control {\r\n\r\n}\r\n.login-page {\r\n  color: #fff;\r\n}"]}